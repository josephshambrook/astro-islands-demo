---
import Divider from "@components/Divider.astro";
import Island from "@components/Island.astro";
import Logs from "@components/Logs.svelte";
import Quote from "@components/Quote.astro";
import Section from "@components/Section.astro";
import SpotifyList from "@components/SpotifyList.svelte";
import Stack from "@components/Stack.astro";
import Layout from "@layouts/Layout.astro";
import { Icon } from "astro-icon/components";
---

<Layout title="Astro Islands demo">
  <main slot="main">
    <Stack space="2.5rem">
      <Section>
        <p>Hello! üëã</p>
        <p>
          This is my demo of client-side üèùÔ∏è Islands within Astro, a nifty
          architecture principle that allows flexibility with developing
          components, improves rendering performance of a website, and allows
          Astro to render multiple UI frameworks <strong
            >at the same time within the same website</strong
          >.
        </p>

        <p>
          This page contains a few components that are rendered as islands, and
          styled as such to stand out.
        </p>
      </Section>

      <Divider />

      <Section>
        <h2>A bit more in-depth</h2>

        <p>To quote Astro directly:</p>

        <Quote>
          An ‚Äúisland‚Äù refers to any interactive UI component on the page. Think
          of an island as an interactive widget floating in a sea of otherwise
          static, lightweight, server-rendered HTML.
        </Quote>

        <p>
          Astro renders all components without JavaScript by default, meaning
          that it only cares about the content that a component outputs after
          rendering, and nothing else.
        </p>

        <p>
          When a component contains some sort of interactivity though, that
          component needs to be specifically told to be bring the JavaScript
          necessary with it to add that interactivity.
        </p>

        <p>
          Enough waffling, how about an example? Below is a component I've
          created that makes a Fetch call to an API, which grabs 5 of my
          most-played songs recently from my own Spotify account. The component
          takes that response and renders the list of tracks.
        </p>
      </Section>

      <Island>
        <h2 slot="title">Joe's recent top tunes</h2>
        <h3>Thanks to <Icon name="bi:spotify" size={24} /> Spotify</h3>
        <SpotifyList client:visible />
      </Island>

      <Section>
        <p></p>
      </Section>
    </Stack>
  </main>

  <aside slot="aside">
    <Island class="sticky">
      <h2 slot="title">Logs</h2>
      <Logs client:load />
    </Island>
  </aside>
</Layout>

<style is:global>
  :root {
    --step--1: clamp(0.9375rem, 0.9148rem + 0.1136vw, 1rem);
    --step-0: clamp(1.125rem, 1.0795rem + 0.2273vw, 1.25rem);
    --step-1: clamp(1.35rem, 1.2727rem + 0.3864vw, 1.5625rem);
    --step-2: clamp(1.62rem, 1.4989rem + 0.6057vw, 1.9531rem);
    --step-3: clamp(1.9438rem, 1.7628rem + 0.9045vw, 2.4413rem);
    --step-4: clamp(2.3325rem, 2.0709rem + 1.308vw, 3.0519rem);
    --step-5: clamp(2.7994rem, 2.4301rem + 1.8466vw, 3.815rem);

    /* colors */
    --color-sea: hsl(188.85, 72.91%, 49.22%);
    --color-beach: hsl(44.42, 63.64%, 76.27%);
    --color-land: hsl(72 50% 50%);
  }

  body {
    background-color: var(--color-sea);
    color: #111;
    display: grid;
    font-family: system-ui, sans-serif;
    font-size: var(--step-0);
    /* fixes a safari issue with font-size and clamp */
    min-height: 0vw;
    gap: 32px;
    grid-template-columns: 1fr;
    line-height: 1.6;
    margin-inline: auto;
    max-width: 840px;
    padding: 16px;
  }

  @media screen and (min-width: 1100px) {
    body {
      gap: 0 32px;
      grid-template-columns: minmax(0, 2fr) minmax(0, 1fr);
      max-width: 1200px;
    }
  }

  /* typography */
  :is(h1, h2, h3, h4, h5, h6) {
    font-weight: bold;
    line-height: 1.3;
  }

  h1 {
    font-size: var(--step-4);
  }
  h2 {
    font-size: var(--step-2);
  }
  /* h3 {
    font-size: var(--step-3);
  }
  h4 {
    font-size: var(--step-2);
  }
  h5 {
    font-size: var(--step-1);
  }
  h6 {
    font-size: var(--step-0);
  } */

  .sticky {
    position: sticky;
    top: 20px;
  }
</style>
